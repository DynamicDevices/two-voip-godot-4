#!/usr/bin/env python
import os
import sys

# Simple original SConstruct file that allows for building and testing locally on my nixos machine 
# Copy over the SConstruct file when you need it, but do not check in


env = SConscript("godot-cpp/SConstruct")

# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

sources = []


# Opus (REQUIRES PRECOMPILE)

if env["platform"] == "windows":
    env.Append(CPPPATH=["opus/include"], LIBS=["opus/win32/VS2015/x64/Release/opus.lib"])
    env.Append(CPPPATH=["OVRLipSyncNative/Include"], LIBS=["OVRLipSyncNative/Lib/Win64/OVRLipSyncShim.lib"])
    env.Append(LINKFLAGS = ['/WX:NO'])
    env.Append(CPPDEFINES={"OVR_LIP_SYNC": None})

else:
    env.Append(CPPPATH="opus/include", LIBS=["opus"], LIBPATH=["opus/build"])
    env.Append(CPPPATH="rnnoise/include", LIBS=[File("rnnoise/.libs/librnnoise.a")], LIBPATH=["rnnoise/.libs"])



# Couldn't get OVR_LIP_SYNC from Android  (the trick is to put [Dependencies] into the .gdextension file) 
# Tried nix develop;genericBuilder, then look at linking function.  The ldd-ar not able to unpack libOVRLipSyncShim.a
# Since the GDExtension can only carry one .so file, a fake addon pointing to OverLipSync.so inserted it into the apk file under Lib
# (use apktool decode to check the structure), but it didn't work.  This is still a potential way to inject executables into Android
if env["platform"] == "android":
    #env.Append(CPPDEFINES={"OVR_LIP_SYNC": None})
    #env.Append(CPPPATH=["OVRLipSyncNative/Include"], LIBS=["OVRLipSyncShim"], LIBPATH=["OVRLipSyncNative/Lib/Android64"])
    pass
# OVRLipSync not available on Linux


if env["platform"] == "linux":
    env.Append(CXXFLAGS = ['-fpermissive'])
    env.Append(
        LINKFLAGS=[
            "-Wl,--no-undefined",
            "-static-libgcc",
            "-static-libstdc++",
            "-fPIC",
        ]
    )
    # And add some linux dependencies.
    env.Append(LIBS=["pthread", "dl"])



# Speex (resampler / jitter buffer)

#env.Append(CPPPATH=["thirdparty/speex/include"])
env.Append(CPPDEFINES={"FLOATING_POINT": None, "USE_SMALLFT": None}) # "EXPORT": None ?
if env['arch'] == "amd64" or env['arch'] == "x86_64":
    env.Append(CPPDEFINES={"USE_SSE": None, "USE_SSE2": None})
elif env['arch'] == "arm64":
    env.Append(CPPDEFINES={"USE_NEON": None})
sources += ["src/speex_resampler/resample.c"]

# OneVOIP Extension

if env["platform"] == "windows":
    env['CCPDBFLAGS'] = '/Zi /Fd${TARGET}.pdb'

# env.Append(CPPDEFINES={"NDEBUG": None}) # For release builds
sources += Glob("src/*.cpp")

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "demo_rtc/bin/libonevoip.{}.{}.framework/libonevoip.{}.{}.{}{}".format(
            env["platform"], env["target"], env["platform"], env["target"], env["arch"], env["SHLIBSUFFIX"]
        ),
        source=sources,
    )
else:
    library = env.SharedLibrary(
        "example/addons/twovoip/libtwovoip{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

Default(library)
